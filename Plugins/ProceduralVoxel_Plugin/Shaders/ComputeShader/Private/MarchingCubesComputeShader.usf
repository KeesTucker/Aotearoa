#include "/Engine/Public/Platform.ush"
#include "Resources/MarchingCubesLookupTables.usf"

struct FTriVerts
{
	float3 A;
	float3 B;
	float3 C;
};
struct FTri
{
	int A;
	int B;
	int C;
};

//In
int Resolution = 0;
float Scale = 0.f;
float IsoLevel = 0.f;
RWStructuredBuffer<float> Voxels;
RWStructuredBuffer<int> Counters;

//Out
RWStructuredBuffer<FTriVerts> Verts;
/*RWStructuredBuffer<FTri> Tris;*/

int VectorIndexToIntIndex(const int3 Coord)
{
	return Coord.x * Resolution * Resolution + Coord.y * Resolution + Coord.z;
}

float3 Interp(const float3 EdgeVertex1, const float ValueAtVertex1, const float3 EdgeVertex2, const float ValueAtVertex2)
{
	return EdgeVertex1 + (IsoLevel - ValueAtVertex1) * (EdgeVertex2 - EdgeVertex1)  / (ValueAtVertex2 - ValueAtVertex1);
}

float3 AddVertex(const int Index, const int3 WorldPos, const int EdgeIndex)
{
	const int E00 = EdgeConnections[EdgeIndex][0];
    const int E01 = EdgeConnections[EdgeIndex][1];
    const int E00Index = Index + VectorIndexToIntIndex(VertexOffsets[E00]);
    const int E01Index = Index + VectorIndexToIntIndex(VertexOffsets[E01]);

    float3 Vert = Interp(
        float3(VertexOffsets[E00]),
        Voxels[E00Index],
        float3(VertexOffsets[E01]),
        Voxels[E01Index]
    ) + WorldPos;
    Vert = Vert * Scale;
	return Vert;
}

[numthreads(THREADS, THREADS, THREADS)]
void MarchingCubesComputeShader(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	/*if (DispatchThreadId.x >= Resolution - 1 ||
		DispatchThreadId.y >= Resolution - 1 ||
		DispatchThreadId.z >= Resolution - 1)
		return;*/
	
	const uint Index = DispatchThreadId.x * (Resolution * Resolution)
				 + DispatchThreadId.y * Resolution
				 + DispatchThreadId.z;

	const int3 VoxelPos = DispatchThreadId;
	
	int CubeIndex = 0;
	[UNROLL]
	for (int i = 0; i < 8; ++i)
	{
		const int CornerPos = Index + VectorIndexToIntIndex(VertexOffsets[i]);
		if (Voxels[CornerPos] < IsoLevel)
			CubeIndex |= int(pow(2, i));
	}

	const int Edges[16] = TriTable[CubeIndex];
	
	uint Count = 0;
	for (int i = 0; Edges[i] != -1; i += 3)
	{
		Count += 1;
	}

	// Atomically increment the counters to reserve space in the output buffers
	int BufferIndex;
	InterlockedAdd(Counters[0], Count, BufferIndex);

	for (int i = 0; Edges[i] != -1; i += 3)
	{
		const float3 ObjectOriginOffset = float3(Resolution / 2.f, Resolution / 2.f, Resolution / 2.f);
		const float3 WorldPos = float3(VoxelPos) - ObjectOriginOffset;

		FTriVerts TriVerts;
		TriVerts.A = AddVertex(Index, WorldPos, Edges[i]);
		TriVerts.B = AddVertex(Index, WorldPos, Edges[i + 1]);
		TriVerts.C = AddVertex(Index, WorldPos, Edges[i + 2]);
		
		/*FTri Tri;
		Tri.A = BufferIndex * 3 + i;
		Tri.B = BufferIndex * 3 + i + 1;
		Tri.C = BufferIndex * 3 + i + 2;*/
		
		Verts[BufferIndex + i / 3] = TriVerts;
		/*Tris[BufferIndex + i / 3] = Tri;*/
	}
}